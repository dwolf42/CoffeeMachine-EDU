type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |-
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        static int stockWater = 400;
        static int stockMilk = 540;
        static int stockCoffeeBeans = 120;
        static int stockCups = 9;
        static int stockMoney = 550;

        public static void main(String[] args) {
            selectMenu();
        }


        public static void displayMachineStatus() {
            System.out.printf("%nThe coffee machine has:%n" +
                            "%d ml of water%n" +
                            "%d ml of milk%n" +
                            "%d g of coffee beans%n" +
                            "%d disposable cups%n" +
                            "$%d of money%n",
                    stockWater, stockMilk, stockCoffeeBeans, stockCups, stockMoney);
            selectMenu();
        }

        public static void selectMenu() {
            String message = "\nWrite action (buy, fill, take, remaining, exit): ";
            System.out.println(message);
            switch (getValidMenuAction()) {
                case "buy":
                    selectDrink();
                    break;
                case "fill":
                    fillStock();
                    break;
                case "take":
                    takeMoney();
                    break;
                case "remaining":
                    displayMachineStatus();
                    break;
                case "exit":
                    // in case there is rage against, this might terminate the machine
                    break;
                default:
                    selectMenu();
                    break;
            }
        }

        public static void selectDrink() {
            String displayedMessage = "\nWhat do you want to buy? 1 - espresso, 2 - latte, " +
                    "3 - cappuccino, back - to main menu:";
            System.out.println(displayedMessage);
            switch (getValidSelectDrinkAction()) {
                case "1":
                    processEspresso(1);
                    break;
                case "2":
                    processLatte(1);
                    break;
                case "3":
                    processCappuccino(1);
                    break;
                case "back":
                    selectMenu();
                default:
                    selectDrink();
                    break;
            }
        }

        public static void processEspresso(int orderedAmount) {
            int costWater = 250;
            int costMilk = 0;
            int costCoffeeBeans = 16;
            int costCups = 1;

            int chargeMoney = 4;

            String itemSelected = "Espresso";
            String missingItem = findMissingItem(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups);

            if (missingItem.equals("none")) {
                alterStock(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups, chargeMoney);
                confirmOrder(orderedAmount, missingItem);
            } else {
                confirmOrder(0, missingItem);
            }
        }

        public static void processLatte(int orderedAmount) {
            int costWater = 350;
            int costMilk = 75;
            int costCoffeeBeans = 20;
            int costCups = 1;

            int chargeMoney = 7;

            String itemSelected = "Latte";
            String missingItem = findMissingItem(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups);

            if (missingItem.equals("none")) {
                alterStock(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups, chargeMoney);
                confirmOrder(orderedAmount, missingItem);
            } else {
                confirmOrder(0, missingItem);
            }
        }

        public static void processCappuccino(int orderedAmount) {
            int costWater = 200;
            int costMilk = 100;
            int costCoffeeBeans = 12;
            int costCups = 1;

            int chargeMoney = 6;

            String itemSelected = "Cappuccino";
            String missingItem = findMissingItem(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups);

            if (missingItem.equals("none")) {
                alterStock(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups, chargeMoney);
                confirmOrder(orderedAmount, missingItem);
            } else {
                confirmOrder(0, missingItem);
            }
        }

        public static String findMissingItem(int orderedAmount, int costWater, int costMilk, int costCoffeeBeans,
                                             int costCups) {
            if (orderedAmount * costWater > stockWater) {
                return "water";
            } else if (orderedAmount * costMilk > stockMilk) {
                return "milk";
            } else if (orderedAmount * costCoffeeBeans > stockCoffeeBeans) {
                return "coffee beans";
            } else if (orderedAmount * costCups > stockCups) {
                return "cups";
            } else {
                return "none";
            }
        }

        public static void alterStock(int orderedAmount, int costWater, int costMilk, int costCoffeeBeans,
                                      int costCups, int chargeMoney) {
            stockWater -= orderedAmount * costWater;
            stockMilk -= orderedAmount * costMilk;
            stockCoffeeBeans -= orderedAmount * costCoffeeBeans;
            stockCups -= orderedAmount * costCups;
            stockMoney += chargeMoney;
        }

        public static void fillStock() {
            String howMuchWater = "\nWrite how many ml of water you want to add:";
            String howMuchMilk = "Write how many ml of milk you want to add:";
            String howMuchCoffeeBeans = "Write how many grams of coffee beans you want to add:";
            String howMuchCups = "Write how many disposable cups of coffee you want to add:";
            System.out.println(howMuchWater);
            stockWater += getValidIntegerStock();
            System.out.println(howMuchMilk);
            stockMilk += getValidIntegerStock();
            System.out.println(howMuchCoffeeBeans);
            stockCoffeeBeans += getValidIntegerStock();
            System.out.println(howMuchCups);
            stockCups += getValidIntegerStock();
            selectMenu();
        }

        public static void takeMoney() {
            System.out.printf("%nI gave you $%d%n", stockMoney);
            stockMoney -= stockMoney;
            selectMenu();
        }

        public static int getValidIntegerStock() {
            String errorMessage = "\nYou may only add amounts of 0 and above";
            Scanner scanner = new Scanner(System.in);
            int inputStock = scanner.nextInt();
            while (inputStock < 0) {
                System.out.println(errorMessage);
                inputStock = scanner.nextInt();
            }
            return inputStock;
        }

        public static String getValidMenuAction() {
            Scanner scanner = new Scanner(System.in);
            String getMenuAction = scanner.nextLine().toLowerCase();
            String regexPattern = "(?i)buy|fill|take|remaining|exit";
            String errorMessage = "\nYou should enter buy, fill, take, remaining or exit";
            while (!getMenuAction.matches(regexPattern)) {
                System.out.println(errorMessage);
                getMenuAction = scanner.nextLine().toLowerCase();
            }
            return getMenuAction;
        }

        public static String getValidSelectDrinkAction() {
            Scanner scanner = new Scanner(System.in);
            String getSelectDrinkAction = scanner.nextLine().toLowerCase();
            String regexPattern = "(?i)1|2|3|back";
            String errorMessage = "\nYou should enter numbers 1, 2, 3 or type back - to main menu";
            while (!getSelectDrinkAction.matches(regexPattern)) {
                System.out.println(errorMessage);
                getSelectDrinkAction = scanner.nextLine().toLowerCase();
            }
            return getSelectDrinkAction;
        }

        public static void confirmOrder(int orderedAmount, String missingItem) {
            if (orderedAmount == 0) {
                System.out.printf("%nSorry, not enough %s!%n",
                        missingItem);
                selectMenu();
            } else {
                System.out.println("\nI have enough resources, making you a coffee!");
                selectMenu();
            }
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMaker.java
  visible: true
  learner_created: true
- name: src/machine/DisplayMessages.java
  visible: true
  learner_created: true
- name: src/machine/DrinkTypes.java
  visible: true
  learner_created: true
- name: src/machine/MachineState.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5334#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Thu, 30 Mar 2023 20:02:39 UTC"
record: -1
